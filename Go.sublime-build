{
    "selector": "source.go",
    "file_regex": "^\\s*(.+?):([0-9]+):([0-9]+)?:?\\s*(.+)$",
    "syntax": "Packages/GoFeather/Build Results - Go.tmLanguage",

    "cmd": ["go", "build"],

    "variants":
    [
        {
            "name": "Install",
            "cmd": ["go", "install"]
        },
        {
            "name": "Clean",
            "cmd": ["go", "clean"]
        },
        {
            "name": "Test",
            "cmd": ["go", "test"]
        },
        {
            "name": "Generate",
            "cmd": ["go", "generate"]
        },
        {
            "name": "Format",
            //"cmd": ["goimports", "-w", "$file"],

            // Format all files in the same package as the current file.
            "shell_cmd": "goimports -w *.go",

            // Format all files in the same package as the current file, and in (non-vendored) sub-packages.
            //"shell_cmd": "find . -type f -name '*.go' -not -path './vendor/*' -print0 | xargs -0 goimports -w",

            "windows": {
                // Format all files in the same package as the current file.
                "shell_cmd": "for /f usebackq %F in (`dir /b *.go`) do goimports -w \"%F\""

                // Format all files in the same package as the current file, and in (non-vendored) sub-packages.
                //"shell_cmd": "for /f usebackq %F in (`dir /b /s *.go ^| findstr /V /C:\\vendor\\`) do goimports -w \"%F\""

                // NOTE: the above could be replaced with:
                //   "shell_cmd": null,
                //   "cmd": ["bash", "-c", "..."]
                // where ... is the same string that's used in the matching non-Windows case.
                // Obviously, this would be making the assumption that bash has been installed on the Windows system.
            }
        },
        {
            "name": "Lint",
            "cmd": ["gometalinter", "--config=$packages/GoFeather/gometalinter_config.json"],

            "word_wrap": false
        },
        {
            "name": "Lint (incl. subpackages)",
            "cmd": ["gometalinter", "--config=$packages/GoFeather/gometalinter_config.json", "./..."],

            "word_wrap": false
        },
        // TODO(DH): Decide whether this alternate linter is worth properly integrating.
        {
          "name": "Format and Lint (golangci-lint fast)",
          "cmd": ["format-and-lint-go"],
          "windows": {
            "cmd": ["bash", "~/workspace/bin/format-and-lint-go"]
          }
        }
    ]
}
